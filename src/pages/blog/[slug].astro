---
import {
  BLOCKS,
  HEADINGS,
  type Paragraph,
  type NodeData,
  TOP_LEVEL_BLOCKS
} from "@contentful/rich-text-types"
import { documentToHtmlString } from "@contentful/rich-text-html-renderer"
import { getPosts } from "../../lib/contentful"
import Layout from "@layouts/Layout.astro"

export async function getStaticPaths() {
  const posts = await getPosts()

  const pages = posts.map((post) => ({
    params: { slug: post.fields.slug },
    props: {
      ...post.fields
    }
  }))

  return pages
}

const options = {
  renderNode: {
    [BLOCKS.EMBEDDED_ASSET]: ({
      data: {
        target: { fields }
      }
    }) =>
      `<div class="my-8 rounded-lg overflow-hidden">
        <img 
          src="${fields.file.url}" 
          alt="${fields.description || 'Content image'}" 
          class="w-full h-auto object-cover"
        />
      </div>`,
    [BLOCKS.PARAGRAPH]: (node: NodeData, next: any) => {
      return `<p class="body-text">${next(node.content)}</p>`
    },
    [BLOCKS.HEADING_1]: (node: NodeData, children: Paragraph) => {
      return `<h2 class="h2">${node.content[0].value}</h2>`
    },
    [BLOCKS.HEADING_2]: (node: NodeData, children: Paragraph) => {
      return `<h3 class="h3">${node.content[0].value}</h3>`
    },
    [BLOCKS.HEADING_3]: (node: NodeData, children: Paragraph) => {
      return `<h4 class="h4">${node.content[0].value}</h4>`
    },
    [BLOCKS.HR]: (node: NodeData, children: Paragraph) => {
      return `<hr class="my-8 border-border" />`
    },
    [BLOCKS.LIST_ITEM]: (node: NodeData, next: any) => {
      return `<li class="body-text !mb-2">${next(node.content)}</li>`
    },
    [BLOCKS.UL_LIST]: (node: NodeData, next: any) => {
      return `<ul class="mb-4 space-y-2 list-disc list-inside ml-6">${next(node.content)}</ul>`
    },
    [BLOCKS.OL_LIST]: (node: NodeData, next: any) => {
      return `<ol class="mb-4 space-y-2 list-decimal list-inside ml-6">${next(node.content)}</ol>`
    }
  }
}

const { title, content, image, author, createdAt } = Astro.props
const publishedDate = createdAt ? new Date(createdAt).toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
}) : null
---

<Layout title={title}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Back Navigation -->
    <div class="mb-8">
      <a 
        href="/blog"
        class="inline-flex items-center gap-2 body-small hover:text-foreground transition-colors duration-200 group"
      >
        <svg 
          class="w-4 h-4 transition-transform duration-200 group-hover:-translate-x-1" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Blog
      </a>
    </div>

    <!-- Article Header -->
    <header class="mb-12">
      {image?.url && (
        <div class="mb-8 aspect-[16/9] overflow-hidden bg-muted">
          <img 
            src={image.url} 
            alt={image.fileName || title}
            class="w-full h-full object-cover"
          />
        </div>
      )}
      
      <div class="space-y-4">
        <h1 class="display-medium">
          {title}
        </h1>
        
        {(author || publishedDate) && (
          <div class="flex items-center gap-4 caption-text">
            {author && (
              <span class="font-medium">By {author}</span>
            )}
            {publishedDate && (
              <>
                {author && <span>â€¢</span>}
                <time>{publishedDate}</time>
              </>
            )}
          </div>
        )}
      </div>
    </header>

    <!-- Article Content -->
    <article class="prose prose-neutral dark:prose-invert max-w-none">
      <div 
        class="text-foreground leading-7" 
        set:html={documentToHtmlString(content, options)}
      />
    </article>
  </div>
</Layout>

<style>
  /* Custom prose styles for better content rendering */
  .prose {
    --tw-prose-body: hsl(var(--muted-foreground));
    --tw-prose-headings: hsl(var(--foreground));
    --tw-prose-links: hsl(var(--primary));
    --tw-prose-bold: hsl(var(--foreground));
    --tw-prose-code: hsl(var(--foreground));
    --tw-prose-pre-bg: hsl(var(--muted));
    --tw-prose-hr: hsl(var(--border));
    --tw-prose-quotes: hsl(var(--muted-foreground));
  }
  
  .prose blockquote {
    border-left: 4px solid hsl(var(--border));
    background: hsl(var(--muted) / 0.5);
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
  }
  
  .prose code {
    background: hsl(var(--muted));
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  .prose pre {
    background: hsl(var(--muted)) !important;
    border: 1px solid hsl(var(--border));
  }
</style>
